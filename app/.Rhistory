shiny::runApp()
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(leaflet)
library(dplyr)
library(maps)
library(rgdal)
###
library(tidyverse)
library(data.table)
library(plotly)
library(formattable)
###
library(ggmap)
library("base64enc")
library("ggplot2")
library("reshape2")
library("geosphere")
Airfare <- Airfare <- readRDS("Airfare_2008.RDS")
level_Depart <- levels(Airfare$city1)
level_Arrive <- levels(Airfare$city2)
# Define UI for application that draws a histogram
shinyUI <- fluidPage(
# Application title
titlePanel("Air Delay Report"),
# Sidebar with a selector input for neighborhood
sidebarLayout(
sidebarPanel(
selectInput("Depart", label = h5("Choose a departure city"),
choices = level_Depart,
selected = 0)
,
uiOutput("arrive")
),
# Show two panels
mainPanel(
leafletOutput("air_map", width="100%", height = "500px")
)
)
)
shinyServer <- function(input, output) {
output$arrive <- renderUI({
if (input$Depart == "all"){
level_Arrive_new <- level_Arrive
}else{
aot_Original_city <- subset(Airfare, city1 == input$Depart)
level_Arrive_new <- level_Arrive[unique(aot_Original_city$city2)]
}
selectInput("Arrive", label = h5("Choose a arriving city"),
choices = c("all" = "all", level_Arrive_new)
)
})
output$air_map <- renderLeaflet({
###
sub_data <- subset(Airfare, select = c(city1,city2,long_city1,lati_city1,long_city2,lati_city2))
if (input$Depart != "all"){
sub_data <- subset(sub_data, city1 == input$Depart)
}
if (input$Arrive != "all"){
sub_data <- subset(sub_data, city2 == input$Arrive)
}
###
map <- leaflet(sub_data) %>% setView(-98.35  , 39.48, zoom = 4) %>%
addProviderTiles(providers$Esri.WorldStreetMap)
###
icons <- awesomeIcons(
icon = 'ion-plane',
iconColor = 'white',
library = 'ion',
markerColor = "blue")
#add marker for dest in the map
map <- map %>% addAwesomeMarkers(lng = ~lati_city2, lat = ~long_city2, icon=icons, layerId = ~city2)
#load lon and lat
flows <- gcIntermediate(select(sub_data, lati_city1, long_city1), select(sub_data, lati_city2, long_city2), n=200 , sp = TRUE, addStartEnd = TRUE)
#add polylines connecting origin and destination
map <- map %>%
addPolylines(data = flows,color = "grey",weight = 2,
dashArray = "5, 5") #color= colors,fillOpacity = 1 weight = data$frequency/5)
})
}
shinyApp(shinyUI,shinyServer)
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
