group_by(year,month) %>%
summarise(count = n())
# Different airports in state
airport.data <- dataset %>%
select(Local.Event.Date,Event.State,Event.Airport,Operator,Aircraft.Make) %>%
mutate(year = year(Local.Event.Date)) %>%
group_by(year,Event.State) %>%
summarise(count = n()) %>%
arrange(year,Event.State)
# Major Aircraft Maker
major.company = c("LOCKHEED","BOEING","AIRBUS")
aircraft.make <- dataset %>%
mutate(year = year(Local.Event.Date)) %>%
select(Aircraft.Make,AIDS.Report.Number,year) %>%
filter(Aircraft.Make %in% major.company) %>%
group_by(Aircraft.Make,year) %>%
summarise(count = n())  %>%
arrange(desc(count))
# Major Operator
# UNITED AIRLINES has two type of names, so I take both of them first then merge them into one
major.operator = c("DELTA AIR LINES INC","SPIRIT AIRLINES INC","JETBLUE AIRWAYS CORPORATION",
"UNITED AIRLINES, INC.","UNITED AIR LINES INC","FRONTIER AIRLINES INC","ALASKA AIRLINES INC",
"SOUTHWEST AIRLINES CO","HAWAIIAN AIRLINES INC","AMERICAN AIRLINES INC",
"SKYWEST AIRLINES INC","EXPRESSJET AIRLINES INC","ENVOY AIR INC")
operator <- dataset %>%
mutate(year = year(Local.Event.Date)) %>%
select(Operator,AIDS.Report.Number,year) %>%
filter(Operator != "",Operator %in% major.operator) %>%
group_by(Operator,year) %>%
summarise(count = n())
operator$Operator <- gsub('UNITED AIR LINES INC',replacement = "UNITED AIRLINES, INC.",operator$Operator)
month.data %>%
plot_ly(
x = ~month,
y = ~count,
frame = ~year,
text = ~count,
hoverinfo = "text",
linetype = I("dash"),
name = 'Accident Number'
)
aircraft.make <- dataset %>%
mutate(year = year(Local.Event.Date)) %>%
select(Aircraft.Make,AIDS.Report.Number,year) %>%
filter(Aircraft.Make %in% major.company) %>%
group_by(Aircraft.Make,year) %>%
summarise(count = n())  %>%
arrange(desc(count))
plot_ly(aircraft.make, x = ~year, y = ~count) %>%
add_lines(color = ~Aircraft.Make)
operator <- dataset %>%
mutate(year = year(Local.Event.Date)) %>%
select(Operator,AIDS.Report.Number,year) %>%
filter(Operator != "") %>%
group_by(Operator,year) %>%
summarise(count = n())
plot_ly(operator, x = ~year, y = ~count) %>%
add_lines(color = ~Operator)
operator <- dataset %>%
mutate(year = year(Local.Event.Date)) %>%
select(Operator,AIDS.Report.Number,year) %>%
filter(Operator != "",Operator %in% major.operator) %>%
group_by(Operator,year) %>%
summarise(count = n())
operator$Operator <- gsub('UNITED AIR LINES INC',replacement = "UNITED AIRLINES, INC.",operator$Operator)
# Major Operator
# UNITED AIRLINES has two type of names, so I take both of them first then merge them into one
major.operator = c("DELTA AIR LINES INC","SPIRIT AIRLINES INC","JETBLUE AIRWAYS CORPORATION",
"UNITED AIRLINES, INC.","UNITED AIR LINES INC","FRONTIER AIRLINES INC","ALASKA AIRLINES INC",
"SOUTHWEST AIRLINES CO","HAWAIIAN AIRLINES INC","AMERICAN AIRLINES INC",
"SKYWEST AIRLINES INC","EXPRESSJET AIRLINES INC","ENVOY AIR INC")
operator <- dataset %>%
mutate(year = year(Local.Event.Date)) %>%
select(Operator,AIDS.Report.Number,year) %>%
filter(Operator != "",Operator %in% major.operator) %>%
group_by(Operator,year) %>%
summarise(count = n())
operator$Operator <- gsub('UNITED AIR LINES INC',replacement = "UNITED AIRLINES, INC.",operator$Operator)
plot_ly(operator, x = ~year, y = ~count) %>%
add_lines(color = ~Operator)
runApp('Documents/GitHub/Spring2019-Proj2-grp13/doc/accident.R')
str(dataset)
data.78.88 <- read.csv("AIDS_78-88.csv",na.strings=c("NA","NaN", " "))
data.89.07 <- read.csv("AIDS_89-07.csv",na.strings=c("NA","NaN", " "))
data.08.18 <- read.csv("AIDS_08-18.csv",na.strings=c("NA","NaN", " "))
data.18.19 <- read.csv("AIDS_18-19.csv")
dataset <- rbind(data.78.88,data.89.07,data.08.18,data.18.19)
str(dataset)
str(dataset$Aircraft.Damage)
dataset$Aircraft.Damage[1:100]
dataset$Total.Injuries[1:100]
runApp('Documents/GitHub/Spring2018-Project2-Group5/app')
runApp('Documents/GitHub/Spring2018-Project2-Group5/app')
library(scales)
rescale
install.packages("ggradar")
devtools::install_github("cardiomoon/ggiraphExtra")
library(ggplot2)
library(ggradar)
suppressPackageStartupMessages(library(dplyr))
library(scales)
mtcars %>%
add_rownames( var = "group" ) %>%
mutate_each(funs(rescale), -group) %>%
tail(4) %>% select(1:10) -> mtcars_radar
ggradar(mtcars_radar)
library(ggplot2)
library(ggradar)
suppressPackageStartupMessages(library(dplyr))
library(scales)
mtcars %>%
add_rownames( var = "group" ) %>%
mutate_each(funs(rescale), -group) %>%
tail(4) %>% select(1:10) -> mtcars_radar
ggradar(mtcars_radar)
require(ggplot2)
require(ggiraph)
require(ggiraphExtra)
install.packages("ggiraphExtra")
require(ggplot2)
require(ggiraph)
require(ggiraphExtra)
mtcars %>%
add_rownames( var = "group" ) %>%
mutate_each(funs(rescale), -group) %>%
tail(4) %>% select(1:10) -> mtcars_radar
ggradar(mtcars_radar)
devtools::install_github("ricardo-bion/ggradar",
dependencies=TRUE)
library(ggradar)
library(ggRadar)
require(ggiraphExtra)
require(ggplot2)
spiderData <- data.frame(year = c("2010", "2010", "2010", "2010", "2030", "2030", "2030", "2030", "2050", "2050", "2050", "2050"),
beverages = c(0.07, 0.02, 0.02, 0.04, 0.09, 0.02, 0.03, 0.06, 0.15, 0.03, 0.05, 0.09),
dairy = c(8.2, 6.46, 5.78, 0, 9.1, 7.16, 6.42, 0, 11.7, 9.21, 8.25, 0),
fish = c(0, 0.01, 0.03, 0, 0, 0.02, 0.05, 0, 0, 0.05, 0.16, 0),
nutrient = c("carbohydrate", "fat", "protein", "total_fiber", "carbohydrate", "fat", "protein", "total_fiber", "carbohydrate", "fat", "protein", "total_fiber"), stringsAsFactors = FALSE)
p <- ggRadar(data = spiderData, mapping = aes(colour = year, facet=nutrient),
rescale = FALSE, interactive = FALSE, use.label = TRUE, size = 2,
legend.position = "right")
p
mtcars %>%
add_rownames( var = "group" ) %>%
mutate_each(funs(rescale), -group) %>%
tail(4) %>% select(1:10) -> mtcars_radar
ggRadar(mtcars_radar)
mtcars %>%
add_rownames( var = "group" ) %>%
mutate_all(funs(rescale), -group) %>%
tail(4) %>% select(1:10) -> mtcars_radar
ggRadar(mtcars_radar)
mtcars %>%
add_rownames( var = "group" )
mtcars %>%
add_rownames( var = "group" ) %>%
mutate_all(funs(rescale), -group)
mtcars
mtcars %>%
add_rownames( var = "group" ) %>%
mutate_all(funs(rescale), -group) %>%
tail(4) %>% select(1:10) %>%
ggRadar(mtcars_radar)
mtcars %>%
add_rownames( var = "group" ) %>%
mutate_all(funs(rescale), c(mpg,cyl,disp)) %>%
tail(4) %>% select(1:10) %>%
ggRadar(mtcars_radar)
mtcars %>%
add_rownames( var = "group" ) %>%
mutate_all(funs(rescale), c(mpg,cyl,disp)) %>%
tail(4) %>%
select(1:10) %>%
ggRadar(mtcars_radar)
mtcars %>%
add_rownames( var = "group" ) %>%
mutate_all(funs(rescale), c("mpg","cyl","disp")) %>%
tail(4) %>%
select(1:10) %>%
ggRadar(mtcars_radar)
library(ggradar)
suppressPackageStartupMessages(library(dplyr))
library(scales)
library(tibble)
mtcars %>%
rownames_to_column( var = "group" ) %>%
mutate_at(vars(-group),funs(rescale)) %>%
tail(4) %>% select(1:10) -> mtcars_radar
ggradar(mtcars_radar)
mtcars %>%
add_rownames( var = "group" ) %>%
mutate_all(funs(rescale), c("mpg","cyl","disp")) %>%
tail(4) %>%
select(1:10)
mtcars %>%
add_rownames( var = "group" ) %>%
mutate_all(funs(rescale), - group) %>%
tail(4) %>%
select(1:10) %>%
ggRadar(mtcars_radar)
mtcars %>%
rownames_to_column( var = "group" ) %>%
mutate_at(vars(-group),funs(rescale)) %>%
tail(4) %>% select(1:10) %>%
ggRadar(mtcars_radar)
mtcars %>%
rownames_to_column( var = "group" ) %>%
mutate_at(vars(-group),funs(rescale)) %>%
tail(4) %>% select(1:10)
mtcars %>%
rownames_to_column( var = "group" ) %>%
mutate_at(vars(-group),funs(rescale)) %>%
tail(4) %>% select(1:10) %>%
ggRadar()
library(ggradar)
devtools::install_github("ricardo-bion/ggradar",
dependencies=TRUE)
devtools::install_github("ricardo-bion/ggradar",
dependencies=TRUE)
runApp('Documents/GitHub/Spring2019-Proj2-grp13/doc/accident_app.R')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate) # used to extract year from date
library(shiny)
library(plotly)
# Accidents
airport.data <- read.csv("../data/accident_state.csv")
month.data <- read.csv("../data/accident_month.csv")
# aircraft.make <- read.csv("../data/accident_aircraft.csv")
# operator <- read.csv("../data/accident_operator.csv")
state.names <- unique(airport.data$Event.State)
tab1 <-   tabPanel("Accident Number by year",
sidebarLayout(
sidebarPanel(
sliderInput("year",
"Different year:",
min = 1978,
max = 2018,
value = 2008)
),
# Show a plot of the generated distribution
mainPanel(
plotlyOutput("accident.year"),
verbatimTextOutput("click")),
br(),
plotlyOutput("accident.month")
)
)
tab1 <-   tabPanel("Accident Number by year",
sidebarLayout(
sidebarPanel(
sliderInput("year",
"Different year:",
min = 1978,
max = 2018,
value = 2008)
),
mainPanel(
plotlyOutput("accident.year"),
verbatimTextOutput("click")),
br(),
plotlyOutput("accident.month")
)
)
runApp('Desktop/as')
plotOutput("accident.month"),
tab1 <-   tabPanel("Accident Number by year",
sidebarLayout(
sidebarPanel(
sliderInput("year",
"Different year:",
min = 1978,
max = 2018,
value = 2008)
),
mainPanel(
plotlyOutput("accident.year"),
verbatimTextOutput("click")),
br(),
plotlyOutput("accident.month")
),
h3("Accident Month",
style="color:	white",
align="center",
astyle="font-family:helvetica;"),
fluidRow( wellPanel(style = "overflow-y:scroll; height: 480px; opacity: 0.9; background-color: #ffffff;",
plotOutput("accident.month"),
p("Footnote: Number in the circle represents the number of accident for airlines"),
tags$a(href = "https://www.transtats.bts.gov/","2000-2017 Data, Source:https://www.transtats.bts.gov/")
)
)
# tab2 <- tabPanel()
ui <- fluidPage(theme=shinytheme("flatly"),
tab1 <-   tabPanel("Accident Number by year",
sidebarLayout(
sidebarPanel(
sliderInput("year",
"Different year:",
min = 1978,
max = 2018,
value = 2008)
),
mainPanel(
plotlyOutput("accident.year"),
verbatimTextOutput("click")),
br(),
plotlyOutput("accident.month")
),
h3("Accident Month",
style="color:	white",
align="center",
astyle="font-family:helvetica;"),
fluidRow( wellPanel(style = "overflow-y:scroll; height: 480px; opacity: 0.9; background-color: #ffffff;",
plotOutput("accident.month"),
p("Footnote: Number in the circle represents the number of accident for airlines"),
tags$a(href = "https://www.transtats.bts.gov/","2000-2017 Data, Source:https://www.transtats.bts.gov/")
)
))
tab1 <-   tabPanel("Accident Number by year",
sidebarLayout(
sidebarPanel(
sliderInput("year",
"Different year:",
min = 1978,
max = 2018,
value = 2008)
),
mainPanel(
plotlyOutput("accident.year"),
verbatimTextOutput("click"))
),
h3("Accident Month",
style="color:	white",
align="center",
astyle="font-family:helvetica;"),
fluidRow( wellPanel(style = "overflow-y:scroll; height: 480px; opacity: 0.9; background-color: #ffffff;",
plotOutput("accident.month"),
p("Footnote: Number in the circle represents the number of accident for airlines"),
tags$a(href = "https://www.transtats.bts.gov/","2000-2017 Data, Source:https://www.transtats.bts.gov/")
)
))
# tab2 <- tabPanel()
ui <- fluidPage(theme=shinytheme("flatly"),
# setBackgroundImage(src = "https://cdn.dribbble.com/users/150724/screenshots/1860497/126_plane.png"),
navbarPage(title = strong("AirPlan2.0"),
tab1
# ,tab2
)
)
ui <- fluidPage(navbarPage(title = strong("AirPlan2.0"),
tab1
# ,tab2
)
)
server <- function(input, output, session) {
output$accident.year <- renderPlotly({
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
lakecolor = toRGB('white')
)
plotdata <- airport.data %>%
filter(year == input$year)
plot_ly(z = plotdata$count, locations = plotdata$Event.State,
type = 'choropleth', locationmode = 'USA-states') %>%
layout(geo = g)
})
output$click <- renderPrint({
d <- event_data("plotly_click")
# if (is.null(d)) "Click on a state to view event data" else d
})
output$accident.month <- renderPlotly(
month.data %>%
plot_ly(
x = ~month,
y = ~count,
frame = ~year,
text = ~count,
hoverinfo = "text",
linetype = I("dash"),
name = 'Accident Number'
)
)
}
shinyApp(ui, server)
month.data %>%
plot_ly(
x = ~month,
y = ~count,
frame = ~year,
text = ~count,
hoverinfo = "text",
linetype = I("dash"),
name = 'Accident Number'
)
month.data %>%
plot_ly(
x = ~month,
y = ~count,
frame = ~year,
text = ~count,
hoverinfo = "text",
linetype = I("dash"),
name = 'Accident Number'
)
month.data %>%
plot_ly(
x = ~month,
y = ~count,
frame = ~year,
text = ~count,
type="scatter",
mode = "marker",
hoverinfo = "text",
linetype = I("dash"),
name = 'Accident Number'
)
month.data %>%
plot_ly(
x = ~month,
y = ~count,
frame = ~year,
text = ~count,
type="scatter",
hoverinfo = "text",
linetype = I("dash"),
name = 'Accident Number'
)
month.data %>%
plot_ly(
x = ~month,
y = ~count,
frame = ~year,
text = ~count,
type="scatter",
hoverinfo = "text",
name = 'Accident Number'
)
month.data %>%
plot_ly(
x = ~month,
y = ~count,
frame = ~year,
text = ~count,
type="scatter",
hoverinfo = "text",
name = 'Accident Number'
) +
add_trace(x = ~month,
y = ~count,
type="bar")
month.data %>%
plot_ly(
x = ~month,
y = ~count,
frame = ~year,
text = ~count,
type="scatter",
hoverinfo = "text",
name = 'Accident Number'
) +
add_trace(
type="bar")
month.data %>%
plot_ly(
x = ~month,
y = ~count,
frame = ~year,
text = ~count,
# type="scatter",
# mode = "marker",
hoverinfo = "text",
linetype = I("dash"),
name = 'Accident Number'
)
runApp('Documents/GitHub/Spring2019-Proj2-grp13/doc/accident_app.R')
runApp('Documents/GitHub/Spring2019-Proj2-grp13/doc/accident_app.R')
tab1 <-   navbarMenu("aaa",
tabPanel("Accident Number by year",
sidebarLayout(
sidebarPanel(
sliderInput("year",
"Different year:",
min = 1978,
max = 2018,
value = 2008)
),
mainPanel(
plotlyOutput("accident.year"),
verbatimTextOutput("click"))
)
))
runApp('Documents/GitHub/Spring2019-Proj2-grp13/doc/accident_app.R')
runApp('Documents/GitHub/Spring2019-Proj2-grp13/doc/accident_app.R')
runApp('Documents/GitHub/Spring2019-Proj2-grp13/doc/accident_app.R')
library(shiny); runApp('Documents/GitHub/Spring2019-Proj2-grp13/doc/accident_app.R')
shiny::runApp('Documents/GitHub/Spring2019-Proj2-grp13/app')
runApp('Documents/GitHub/Spring2019-Proj2-grp13/doc/accident_app.R')
runApp('Documents/GitHub/Spring2019-Proj2-grp13/app')
shiny::runApp('Documents/Documents - 张悦’s MacBook Pro/Columbia/02_Spring2019/GR5243_ADS/project2/project2_app')
runApp('Documents/Documents - 张悦’s MacBook Pro/Columbia/02_Spring2019/GR5243_ADS/project2/project2_app')
runApp('Documents/Documents - 张悦’s MacBook Pro/Columbia/02_Spring2019/GR5243_ADS/project2/project2_app')
source('~/Documents/project2/app.R', echo=TRUE)
source('~/Documents/project2/app.R', echo=TRUE)
source('~/Documents/project2/app.R')
shiny::runApp('Documents/project2')
shiny::runApp('Documents/GitHub/Spring2019-Proj2-grp13/app')
setwd("~/Documents/GitHub/Spring2019-Proj2-grp13/app")
runApp()
runApp()
runApp()
